
## 文档记录管控
对我提出的每项需求，按规范进行理解意图、需求，自动生成以下文件。
并在每次修改代码后持续维护所有的项目文档体系，包括：
- `PRD.md`：记录并更新需求说明；
- `design.md`：结构化设计方案；
- `Progress.md`：任务拆解与开发进度跟踪；
- `API.md`（如涉及接口开发）：接口文档；
- `README.md`：项目总览与使用说明；
- `structure.md`：模块化代码文件结构说明；
- `variables.md`：记录代码中所有变量的命名、作用域（全局/局部）、是否初始化、是否重复或冲突等信息，作为变量使用规范及审查参考；
- `error_log.md`：运行时错误记录与排查说明。细化为按模块记录、错误栈追踪、解决方案等；
- `commit_message.md`：对代码的变更做记录与说明，描述修改点和原因；
请你在每次编写代码的时候，都遵循上述文档的信息

##命名规范
- 结构体和联合体类型：大驼峰命名（如ConfigDataBuffer）
- 变量和结构体成员：小驼峰命名（如configData）
- 全局函数：Module_Xxxx格式
- 局部函数：Module_lXxxx格式（l表示local）

## 编程规范
- 严禁删除看似无关的代码或功能，除非用户明确授权
- 需按功能/脚本/模块拆分为多个独立代码文件，采用模块化设计，将功能拆分为独立、可重用的组件，确保每个模块职责单一
- 提供详细且格式化的终端输出，帮助用户精确定位和解决问题
- 实现全面的错误处理和日志记录机制，确保代码健壮性  
- 复杂需求拆解成小任务，分步实现，每完成一个小任务后再继续  
- 关键位置需嵌入规范的日志（log）打印代码，并附带中文注释说明功能实现思路，确保代码可读性与可维护性
- 在已有功能基础上添加新功能时，必须确保：  1. 不影响原有功能。 2. 不添加其他功能、代码、逻辑、文件、配置、依赖  
- 代码修改遵循单一职责原则，不混合多个变更
- 尽量复用已有代码，避免重复代码
- 不引入不必要的依赖，避免增加维护成本
- 实现后进行基本逻辑自检，确保无错误
- 如果有疑问，先询问再修改，不要擅自做决定
- 重要操作（如文件删除、数据库修改）应自动备份，避免误操作
- 涉及数据库变更的操作，优先生成 SQL 变更脚本，而非直接执行

## 架构感知
- 应优先分析现有代码库，避免重复实现已有功能
- 在添加新功能时，优先复用已有模块，而非从零编写
- 如遇架构不清晰的情况，先整理依赖关系，再执行修改
- 在执行任务前，必须先读取{文档记录管控}的每个文件，如果没有，则按要求进行创建

## 输出规范
- 除代码本体外，所有内容均使用中文与我沟通和输出
- 每次代码修改后，AI 必须更新{文档记录管控}的每个文件
